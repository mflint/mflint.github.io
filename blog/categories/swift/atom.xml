<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: swift | Matthew's Dev Blog]]></title>
  <link href="http://daringsnowball.net/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://daringsnowball.net/"/>
  <updated>2018-12-02T23:17:55+00:00</updated>
  <id>http://daringsnowball.net/</id>
  <author>
    <name><![CDATA[Matthew Flint]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Accessing Swift Arrays Without Counting on Fingers]]></title>
    <link href="http://daringsnowball.net/accessing-swift-arrays-without-counting-on-fingers/"/>
    <updated>2018-12-02T22:59:43+00:00</updated>
    <id>http://daringsnowball.net/accessing-swift-arrays-without-counting-on-fingers</id>
    <content type="html"><![CDATA[<p>I have a confession to make: I&rsquo;ve been writing code for 35 years, but still need to count on my fingers when coding an array range-check.</p>

<p>It goes something like this:</p>

<ul>
<li>I imagine I have an array containing four elements</li>
<li>I hold up four fingers</li>
<li>I count &ldquo;zero, one, two, three&rdquo;, then think &ldquo;so if I ask for index four, it will break, so I need to range-check&hellip;&rdquo;</li>
</ul>


<p>OMG, 35 years. I&rsquo;ve probably done this thousands of times, and the range-check rules still won&rsquo;t stick in my brain.</p>

<p>But here&rsquo;s a sneaky way to avoid that range-checking code, and I&rsquo;m not ashamed to say that I use this extension for real.</p>

<!-- more -->


<h3>An Array Extension</h3>

<p>This is simply an Array extension which returns <code>nil</code> if the index doesn&rsquo;t exist. My reasoning is this: it&rsquo;s easier (for me) to write <code>if let</code> or <code>guard let</code> rather than counting on my fingers, and it saves me from coding stupid off-by-one errors.</p>

<pre><code>extension Array {
    func element(at index: Int) -&gt; Element? {
        return index &lt; self.count ? self[index] : nil
    }
}
</code></pre>

<p>And I use it like this:</p>

<pre><code>if let fifthElement = myArray.element(at: 4) {
    // do something
}
</code></pre>

<p>Or like this:</p>

<pre><code>guard let fifthElement = myArray.element(at: 4) else {
    // not there
    return
}

// do something
</code></pre>

<p>Result: I do the &ldquo;count on fingers&rdquo; thing once per Swift project, when coding this extension, instead of several times per day.</p>

<p>I wonder if something like this would ever be added to the standard library?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift Extensions for Protocol Conformance Considered Harmful]]></title>
    <link href="http://daringsnowball.net/swift-extensions-for-protocol-conformance-considered-harmful/"/>
    <updated>2018-11-23T12:11:43+00:00</updated>
    <id>http://daringsnowball.net/swift-extensions-for-protocol-conformance-considered-harmful</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve come to the conclusion that using Swift extensions to make types conform to protocols is rather an anti-pattern. Let me explain why.</p>

<!-- more -->


<h3>How extensions can be useful</h3>

<p>Swift type extensions are amazing for adding extra functionality to existing types if the following two conditions are true:</p>

<ol>
<li>you don&rsquo;t own the type</li>
<li>you could reasonably argue that the functionality is <em>missing</em> from that type</li>
</ol>


<p>Example: if we wanted to url-encode a string (<code>Hello world</code> would become <code>Hello%20World</code>), we might do this by extending the <code>String</code> type:</p>

<pre><code>extension String {
    func urlEncode() -&gt; String {
        // implementation here
    }
}
</code></pre>

<p>However, if you already own the type, then I&rsquo;d argue that you should simply add the new functionality to the type itself.</p>

<p>Also, if your new functionality is <em>very specific to the app you&rsquo;re writing</em>, then an extension probably isn&rsquo;t appropriate. Example: your app has a set of railway stations which can be identified by a string &lsquo;reference code&rsquo;. You might consider adding an extension like this, to get the model for a given code:</p>

<pre><code>// don't do this
extension String {
    func stationModel() -&gt; StationModel {
        // implementation here
    }
}

let aslocktonStation = "ALK".stationModel()
</code></pre>

<p>No, don&rsquo;t do that. A Swift <code>String</code> doesn&rsquo;t care about your app.</p>

<h3>Three main problems with extensions for protocol conformance</h3>

<p>However I do object to using extensions for protocol conformance:</p>

<ol>
<li>extensions alter the <em>public interface</em> for the extended type, which breaks encapsulation (exposing the internal workings of that type), and is ripe for abuse by future lazy devs</li>
<li>it&rsquo;s really easy to lose code when relying on extensions everywhere</li>
<li>type-safety can be damaged</li>
</ol>


<h3>Public interface changes</h3>

<p>Here&rsquo;s an example of a class which is interested in receiving messages from a paired WatchKit app:</p>

<pre><code>extension ViewController: WCSessionDelegate {
    func session(_ session: WCSession, didReceiveMessage message: [String : Any]) {
        self.myData = self.parse(incomingMessage: message)
        self.updateUI()
    }
}
</code></pre>

<p>This will work OK, but now <code>WCSessionDelegate</code> is part of the public interface of this <code>ViewController</code> class. Our ViewController&rsquo;s WatchKit dependency is now there for everyone to see (and possibly abuse).</p>

<p>Somebody, eventually, will be tempted call these delegate functions directly:</p>

<pre><code>let session: WCSession? = nil
myViewController.session(session!, didReceiveMessage: ["foo": "bar"])
</code></pre>

<p>A nicer alternative solution, which was common in my Java days, would be to make a private internal type which conforms to the delegate protocol:</p>

<pre><code>class ViewController: UIViewController {
    private class MessageHandler: NSObject, WCSessionDelegate {
        private weak var viewController: ViewController?

        init(viewController: ViewController) {
            self.viewController = viewController
        }

        func session(_ session: WCSession, didReceiveMessage message: [String : Any]) {
            viewController.accept(message)
        }
    }

    private var messageHandler: MessageHandler?

    override func viewDidLoad() {
        messageHandler = MessageHandler(viewController: self)
        watchSession.delegate = messageHandler
    }

    private func accept(_ incomingMessage: [String : Any]) {
        myData = parse(incomingMessage: message)
        updateUI()
    }
}
</code></pre>

<p>With this solution, the WatchKit dependency is hidden and the delegate functions aren&rsquo;t exposed in the public interface for the class.</p>

<h3>Losing code in extensions</h3>

<p>I&rsquo;m a firm believer in having one unambiguous place to put a piece of code, and that code should be easy to find. Unfortunately, when using extensions for protocol conformance, code can get lost.</p>

<p>In my <em>Nearly Departed</em> app rewrite, I have sets of <code>Model</code> objects which contain data received from an API, and some <code>ViewModel</code> protocols which format that data for presentation on-screen.</p>

<p>Simplified example:</p>

<pre><code>struct DepartureModel {
    var destination: String
    var departureTime: String
}

protocol DepartureViewModel {
    func departureDescription() -&gt; String
}

extension DepartureModel: DepartureViewModel {
    func departureDescription() -&gt; String {
        return "\(departureTime) to \(destination)"
    }
}
</code></pre>

<p>So the <code>departureDescription()</code> func might return something like &ldquo;18:05 to Nottingham&rdquo;.</p>

<p>This felt like a fabulous idea, which I embraced - but now I struggle to find those extensions. (Admittedly this is made more difficult because I have targets for an iOS app, a Today extension and a WatchKit extension)</p>

<p>It&rsquo;s so difficult to use that I&rsquo;m starting to rewrite these parts with a separate concrete <code>DepartureViewModel</code> class, which holds a reference to the <code>DepartureModel</code>:</p>

<pre><code>struct DepartureViewModel {
    let departure: DepartureModel

    func departureDescription() -&gt; String {
        return "\(departure.departureTime) to \(departure.destination)"
    }
}
</code></pre>

<p>Yes, preferring composition over interitance is still just as relevant in 2018 - and conformance-via-extensions feels similar to &ldquo;inheritance&rdquo; to me.</p>

<h3>Type-safety implications</h3>

<p>I found that I was writing code like this:</p>

<pre><code>guard let viewModel = model as? DepartureViewModel else {
    // ooh crikey, what now?
    preconditionFailure()
}

label.text = viewModel.departureDescription()
</code></pre>

<p>Not. Pretty. At. All.</p>

<p>I&rsquo;d favour compile-time failures over runtime crashes every time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling widgetPerformUpdate in an iOS Today extension]]></title>
    <link href="http://daringsnowball.net/handling-widgetperformupdate-in-an-ios-today-extension/"/>
    <updated>2018-11-10T12:59:02+00:00</updated>
    <id>http://daringsnowball.net/handling-widgetperformupdate-in-an-ios-today-extension</id>
    <content type="html"><![CDATA[<p>Apple&rsquo;s documentation about the <code>NCWidgetProviding</code> protocol, and <code>widgetPerformUpdate:</code> function in particular are rather sparse, and most posts on StackOverflow seem to have a very simplistic view about how this callback should be coded. So here are my tips.</p>

<!-- more -->


<p>Most examples you&rsquo;ll see for <code>widgetPerformUpdate:</code> look rather like this:</p>

<pre><code>func widgetPerformUpdate(completionHandler: (@escaping (NCUpdateResult) -&gt; Void)) {
    let resultModel = performExpensiveNetworkOperation()
    label.text = resultModel.someValue
    completionHandler(NCUpdateResult.newData)
}
</code></pre>

<p>&hellip; which would probably be OK, most of the time, but there are very few examples of expensive work being done asynchronously.</p>

<p>There are, however, three <em>big</em> hints that this is the right thing to do:</p>

<ol>
<li>Apple&rsquo;s documentation says <em>&ldquo;It&rsquo;s expected that the widget will perform the work to update asynchronously and off the main thread as much as possible&rdquo;</em>. (The <code>widgetPerformUpdate:</code> call does indeed arrive on the main thread)</li>
<li>the <code>completionHandler</code> block is annotated <code>@escaping</code>, implying that it will outlive the scope of the <code>widgetPerformUpdate:</code> function itself</li>
<li>the function returns <code>Void</code>; if this were intended to be a <em>blocking</em> call, then the func would simply have an <code>NCUpdateResult</code> return value instead of providing a completion block</li>
</ol>


<h3>Doing it right</h3>

<p>The correct way to do this depends on whether your long-running operation is synchronous (blocking), or asychronous with a completion block, or asynchronous with a delegate. Here are examples of all three.</p>

<h4>Performing a synchronous (blocking) operation</h4>

<pre><code>class SynchronousCallExampleViewController: UIViewController, NCWidgetProviding {
    private let dataSource = DataSource()
    private var data: Data?

    private func updateUI() {
        DispatchQueue.main.async {
            // update UI components
        }
    }

    func widgetPerformUpdate(completionHandler: @escaping (NCUpdateResult) -&gt; Void) {
        DispatchQueue.global().async {
            // fetch data on a background thread
            self.data = self.dataSource.fetchData()
            self.updateUI()
            completionHandler(.newData)
        }
    }
}
</code></pre>

<h4>Performing an asynchronous operation with a completion block</h4>

<pre><code>class AsynchronousCallWithCompletionBlockExampleViewController: UIViewController, NCWidgetProviding {
    private let dataSource = DataSource()
    private var data: Data?

    private func updateUI() {
        DispatchQueue.main.async {
            // update UI components
        }
    }

    func widgetPerformUpdate(completionHandler: @escaping (NCUpdateResult) -&gt; Void) {
        DispatchQueue.global().async {
            // fetch data on a background thread
            self.dataSource.fetchDataAsync({ [weak self] (data) in
                guard let self = self else { return }

                self.data = data
                self.updateUI()
                completionHandler(.newData)
            })
        }
    }
}
</code></pre>

<h4>Performing an asynchronous operation with a delegate callback</h4>

<pre><code>class AsynchronousCallWithDelegateExampleViewController: UIViewController, NCWidgetProviding, DataSourceDelegate {
    private var dataSource = DataSource()
    private var widgetCompletionHandler: ((NCUpdateResult) -&gt; Void)?
    private var data: Data?

    private func updateUI() {
        DispatchQueue.main.async {
            // update UI components
        }
    }

    func widgetPerformUpdate(completionHandler: @escaping (NCUpdateResult) -&gt; Void) {
        widgetCompletionHandler = completionHandler

        dataSource.delegate = self
        DispatchQueue.global().async {
            // fetch data on a background thread
            self.dataSource.fetchDataAsync()
        }
    }

    func dataDidUpdate(dataSource: DataSource) {
        data = dataSource.data
        updateUI()

        if let completionHandler = widgetCompletionHandler {
            completionHandler(.newData)
            widgetCompletionHandler = nil
        }
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enums are meant for switching]]></title>
    <link href="http://daringsnowball.net/enums-are-meant-for-switching/"/>
    <updated>2018-11-03T09:00:16+00:00</updated>
    <id>http://daringsnowball.net/enums-are-meant-for-switching</id>
    <content type="html"><![CDATA[<p>I&rsquo;m rewriting <em>Nearly Departed</em>, and working on a large iOS project in my day-job. While working on both of those projects, I&rsquo;ve started to rely on two unofficial rules for enumerations:</p>

<ol>
<li>Enumeration values should always be checked with <code>switch</code>, not <code>if</code></li>
<li><code>default:</code> cases in <code>switch</code> statements are bad</li>
</ol>


<!-- more -->


<p>My reason for this is that <code>switch</code> statements without <code>default:</code> cases make the intent of the code explicit; we can be sure when reading code that the developer has properly considered every case.</p>

<p><em>As an extra bonus</em>, you&rsquo;ll now get a compile-time error if more cases are ever added to the enumeration. This isn&rsquo;t as uncommon as you might think - Apple added a new case <code>.provisional</code> to the <code>UNAuthorizationStatus</code> enumeration in the iOS 12 SDK.</p>

<p>It&rsquo;s too early to have seen any real benefits from doing this (other than annoyed colleagues after I&rsquo;ve reviewed their pull requests) but I&rsquo;m <em>sure</em> we&rsquo;ll be glad of it sometime in the future.</p>

<h3>Exceptions to these rules</h3>

<p>In unit-test code, I wouldn&rsquo;t insist on <code>switch</code>ing over an enumeration. It&rsquo;s quite valid to do this when asserting the result of some operation:</p>

<pre><code>guard case let MyEnumeration.firstCase(myValue) = someResult else {
    XCTFail("Expected a 'firstCase' but got \(someResult) instead")
    return
}

XCTAssertEqual(myValue, "expected value")
</code></pre>

<h3>Extra bonus half-rule with no explanation</h3>

<p>An enumeration with more than ten values is a code-smell.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rewriting Nearly Departed (part 4: storage and sync)]]></title>
    <link href="http://daringsnowball.net/nearly-departed-rewrite-storage-and-sync/"/>
    <updated>2017-12-23T22:16:29+00:00</updated>
    <id>http://daringsnowball.net/rewriting-nearly-departed-storage-and-sync</id>
    <content type="html"><![CDATA[<p>This post gives an overview about how <em>Nearly Departed</em> Routes are stored and synced between iPhone and Apple Watch.</p>

<!-- more -->


<blockquote><p>This is part 4 of a multi-part series:</p>

<ul>
<li><a href="/nearly-departed-rewrite-intro/">Part 1</a>: intro</li>
<li><a href="/nearly-departed-rewrite-tech-background/">Part 2</a>: tech background</li>
<li><a href="/nearly-departed-rewrite-plans/">Part 3</a>: rewrite plans</li>
<li>Part 4: storage and sync</li>
</ul>
</blockquote>

<h3>Route storage</h3>

<p>Routes are stored in <code>UserDefaults</code> on the iPhone, and shared with the Watch using <em>WatchConnectivity</em>. To keep things simple, I have a <code>Storing</code> protocol for storing preferences and two implementations - one for the iPhone and one for the Watch.</p>

<p>The iPhone implementation stores preferences in <code>UserDefaults</code> and also sends things to the Watch. The Watch implementation simply talks to its counterpart on the iPhone.</p>

<p>After some experimentation (and help from <a href="https://developer.apple.com/library/content/documentation/General/Conceptual/WatchKitProgrammingGuide/SharingData.html">Apple&rsquo;s WatchConnectivity documentation</a> and <a href="https://kristina.io/watchos-2-how-to-communicate-between-devices-using-watch-connectivity/">Kristina Fox&rsquo;s blog</a>), I settled on this communication strategy:</p>

<blockquote><ul>
<li><p>When the Watch app first starts, it requests the current preferences by sending a &ldquo;get&rdquo; command to the iPhone via <em>Interactive Messaging</em>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">session</span><span class="p">.</span><span class="n">sendMessage</span><span class="p">([</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">cmd</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="kr">get</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;],</span> <span class="nl">replyHandler</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="n">reply</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>  <span class="c1">// handle reply from phone</span>
</span><span class='line'><span class="p">})</span> <span class="p">{</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>  <span class="c1">// handle error</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p></li>
<li><p>If preferences change on the iPhone, it sends data to the Watch by updating the <em>Application Context</em>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// prefs is [String : Any]</span>
</span><span class='line'><span class="n">session</span><span class="p">.</span><span class="n">updateApplicationContext</span><span class="p">(</span><span class="n">prefs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p></li>
<li><p>If preferences change on the Watch, it sends data to the iPhone using <em>Interactive Messaging</em>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// prefs is [String : Any]</span>
</span><span class='line'><span class="n">session</span><span class="p">.</span><span class="n">sendMessage</span><span class="p">(</span><span class="n">prefs</span><span class="p">,</span> <span class="nl">replyHandler</span><span class="p">:</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">errorHandler</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>  <span class="c1">// handle error</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></p></li>
</ul>
</blockquote>

<p>This strategy seems to work well; both <em>Application Context</em> and <em>Interactive Messaging</em> work reliably, and quickly. (I&rsquo;m testing with iOS 11.2 and WatchOS 4.2)</p>

<h3>Phone dependence</h3>

<p>This means that the Watch app doesn&rsquo;t store any preferences locally, but instead gets preferences from the iPhone every time the Watch app starts. This is fine for now, but will be a problem when cellular Watches are more common. I&rsquo;ll make a change in the future to store preferences locally on the Watch, so the app can start without a nearby phone.</p>
]]></content>
  </entry>
  
</feed>
