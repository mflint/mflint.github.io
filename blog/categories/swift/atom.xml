<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: swift | Matthew's Dev Blog]]></title>
  <link href="http://daringsnowball.net/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://daringsnowball.net/"/>
  <updated>2019-10-01T15:23:45+01:00</updated>
  <id>http://daringsnowball.net/</id>
  <author>
    <name><![CDATA[Matthew Flint]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Exploring Different Behaviours in Swift Enums]]></title>
    <link href="http://daringsnowball.net/different-swift-enum-behaviours/"/>
    <updated>2019-07-27T19:35:48+01:00</updated>
    <id>http://daringsnowball.net/exploring-different-behaviours-in-swift-enums</id>
    <content type="html"><![CDATA[<p>I have a dilemma; the Swift <code>enum</code> is a first-class type and, if we&rsquo;re to obey the laws of encapsulation, an <code>enum</code> type should own its functionality. But can we do this in a nice way, when its behaviour is different for each value in the enum?</p>

<p>In this post, we&rsquo;ll explore the old Java <em>type-safe enumeration</em> pattern, revisit my old <a href="/enums-are-meant-for-switching/">enums are meant for switching</a> blogpost, and try to combine the lot.</p>

<!-- more -->


<h3>Problem statement</h3>

<p>My open-source <a href="https://github.com/mflint/ios-tldr-viewer/">tldr-pages app</a> shows concise man-pages for command-line commands - and some of these have variations for different platforms. For example, the command <code>hostname</code> has different documentation for macOS and Linux. So I&rsquo;ve defined a type called <code>Platform</code> to represent a single platform.</p>

<p>The requirements for <code>Platform</code> are simple. It must be able to:</p>

<ul>
<li>be instantiated by passing in a known string (<code>osx</code>, <code>sunos</code>, etc)</li>
<li>handle unknown platform strings (<code>vms</code> or <code>os2warp</code>)</li>
<li>give us a name which is suitable for display</li>
</ul>


<h3>The ugly Platform.swift</h3>

<p>At the time of writing, <code>Platform.swift</code> looks rather like this:</p>

<pre><code>class Platform {
    /// this matches the platform names in the main tl;dr project
    var name: String

    /// this is the name as displayed on the screen
    var displayName: String

    private static let platformMapping = [
        "osx": "macOS",
        "sunos": "Solaris",
        "linux": "Linux",
        "windows": "Windows",
        "common": "Common"
    ]

    private init(name: String) {
        self.name = name

        if let mapped = Platform.platformMapping[name] {
            self.displayName = mapped
        } else {
            self.displayName = name.capitalized
        }
    }
}
</code></pre>

<p>And I&rsquo;m creating Platform objects like this:</p>

<pre><code>let macOS = Platform(name: "osx") // "osx" value comes from the tl;dr project
</code></pre>

<p>There&rsquo;s lots of things wrong with this type. First, it&rsquo;s a <code>class</code>, and there&rsquo;s no reason for it to be a reference type. We need a different approach.</p>

<h3>Changing <code>Platform</code> to be an <code>enum</code></h3>

<p>An <code>enum</code> would be ideal, so let&rsquo;s try that:</p>

<pre><code>enum Platform: String {
    case osx
    case sunos
    case linux
    case windows
    case common
    case unknown(name: String)

    var displayName: String {
        get {
            switch self {
            case .osx:
                return "macOS"
            case .sunos:
                return "Solaris"
            case .linux:
                return "Linux"
            case .windows:
                return "Windows"
            case .common:
                return "Common"
            case .unknown(let name):
                return name.capitalized
            }
        }
    }
}
</code></pre>

<p>I said a while back that <a href="/enums-are-meant-for-switching/">enums were meant for switching</a>, and this satisfies my rule.</p>

<p>This looks nice - except it <strong>doesn&rsquo;t compile</strong>. A Swift <code>enum</code> can have a raw type (<code>enum Platform: String</code>) or a case with arguments (<code>unknown(name: String)</code>) but not both. Our requirement is that this <em>must</em> handle unknown platform names, so we can&rsquo;t lose the <code>unknown</code> case. The raw type must go, but we can provide similar functionality by adopting <code>ExpressibleByStringLiteral</code>:</p>

<pre><code>enum Platform: ExpressibleByStringLiteral {
    case osx
    case sunos
    case linux
    case windows
    case common
    case unknown(name: String)

    var displayName: String {
        get {
            switch self {
            case .osx:
                return "macOS"
            case .sunos:
                return "Solaris"
            case .linux:
                return "Linux"
            case .windows:
                return "Windows"
            case .common:
                return "Common"
            case .unknown(let name):
                return name
            }
        }
    }

    // initializer for ExpressibleByStringLiteral
    public init(stringLiteral name: String) {
        switch name {
        case "osx":
            self = .osx
        case "sunos":
            self = .sunos
        case "linux":
            self = .linux
        case "windows":
            self = .windows
        case "common":
            self = .common
        default:
            self = .unknown(name: name)
        }
    }
}
</code></pre>

<p>Now we can use the enum like this:</p>

<pre><code>let platform: Platform = "osx"
platform.displayName // "macOS"
</code></pre>

<p>But here&rsquo;s the problem: we now have two ugly <code>switch</code> statements in our <code>Platform</code> type - and if we add more functionality to the type, then it&rsquo;s likely that we&rsquo;ll be adding even more <code>switch</code>es.</p>

<p>Worse still: all the logic for each different platform is scattered throughout the whole class, and ideally all the <em>linux</em> code would be grouped together. I don&rsquo;t want switches everywhere.</p>

<h3>Enter the <em>strategy</em> pattern</h3>

<p>I first came across the <a href="https://en.wikipedia.org/wiki/Strategy_pattern">Strategy Pattern</a> in the <a href="https://en.wikipedia.org/wiki/Design_Patterns">Gang of Four</a> in the late 1990&rsquo;s, and this pattern is perfect for the case where every function in an object consists of a near-identical <code>switch</code> statement. It looks like this:</p>

<pre><code>// this protocol defines the common behaviours for each platform
private protocol PlatformStrategy {
    var displayName: String { get }
}

// now we define a concrete implementation for each platform
private struct OSXPlatformSrategy: PlatformStrategy {
    let displayName = "macOS"
}

// and our public Platform class has a reference to one of the platform types
public struct Platform {
    private let strategy: PlatformStrategy

    public var displayName: String {
        get {
            return strategy.displayName
        }
    }

    init() {
        // somehow decide which platform this is
        strategy = OSXPlatformStrategy()
    }
}
</code></pre>

<p>This seems like a lot of work for a single <code>displayName</code> proprety - but if there were a few more properties, there are real advantages of keeping all the <em>macOS</em> functionality inside the <code>OSXPlatformStrategy</code> type.</p>

<p>In the old Java world, before <code>enum</code> was added to the languade in Java 5, we used to write <em>typesafe enumerations</em> like this:</p>

<pre><code>class Platform {
    static final Platform osx = new Platform("osx");
    static final Platform linux = new Platform("linux");

    String name;

    private Platform(String name) {
        this.name = name;
    }
}
</code></pre>

<p>&hellip; and it wasn&rsquo;t hard to apply the strategy pattern to the Java typesafe enum. We&rsquo;d make the enum type <em>abstract</em>, then define each case as an anonymous class which extends the abstract type, and provides implementations for the abstract methods:</p>

<pre><code>abstract class Platform {
    static final Platform osx = new Platform("osx") {
        String displayName() {
            return "macOS";
        }
    };

    static final Platform linux = new Platform("linux") {
        String displayName() {
            return "Linux";
        }
    };

    String name;
    abstract String displayName();

    private Platform(String name) {
        this.name = name;
    }
}
</code></pre>

<p>This is nice; the individual behaviour for the <em>osx</em> and <em>linux</em> cases is encapsulated entirely in the two anonymous classes. Can we do something similar in Swift?</p>

<h3>Broken Swift implementation</h3>

<p>The equivalent Swift code would look like this:</p>

<pre><code>protocol PlatformStrategy {
    var displayName: String { get }
}

enum Platform {
    case osx
    case linux

    var strategy: PlatformStrategy

    var displayName: String {
        get {
            return strategy.displayName
        }
    }

    init(name: String) {
        // set the strategy here
    }
}
</code></pre>

<p>Unfortunately is doesn&rsquo;t compile, because <code>enums must not contain stored properties</code>. However Swift enums already do (kind of) have a property: <code>rawValue</code>. We&rsquo;d need to lose our <code>unknown</code> case with its argument, but can we abuse <code>rawValue</code> as a place to store our strategy?</p>

<h3><code>rawValue</code> as a strategy type</h3>

<p>It&rsquo;s not as easy as you&rsquo;d think, because the raw value for a case must be a literal value. So this won&rsquo;t work:</p>

<pre><code>protocol PlatformStrategy {}

class OSXStrategy {}

class LinuxStrategy {}

enum Platform: PlatformStrategy {
    case osx = OSXStrategy()     // not a literal
    case linux = LinuxStrategy() // not a literal
}
</code></pre>

<p>But it <em>is</em> possible to declare a new type for our <code>rawValue</code> which adopts <code>ExpressibleByStringLiteral</code>. (Currently, this also needs to adopt <code>Equatable</code> to avoid a Signal 11 compiler crash)</p>

<pre><code>protocol PlatformStrategy {
    var displayName: String { get }
}

struct OSXStrategy: PlatformStrategy {
    var displayName = "macOS"
}

struct LinuxStrategy: PlatformStrategy {
    var displayName = "Linux"
}

struct OtherStrategy: PlatformStrategy {
    var displayName: String

    init(_ name: String) {
        displayName = name
    }
}

struct PlatformRawValue: ExpressibleByStringLiteral, Equatable {
    let strategy: PlatformStrategy

    public init(stringLiteral name: String) {
        switch name {
        case "osx":
            strategy = OSXStrategy()
        case "linux":
            strategy = LinuxStrategy()
        default:
            strategy = OtherStrategy(name)
        }
    }

    static func ==(_ lhs: PlatformRawValue, _ rhs: PlatformRawValue) -&gt; Bool {
        return lhs.strategy.displayName == rhs.strategy.displayName
    }
}

enum Platform: PlatformRawValue, RawRepresentable {
    typealias RawValue = PlatformRawValue

    var displayName: String {
        get {
            return rawValue.strategy.displayName
        }
    }

    case osx = "osx"
    case linux = "linux"
}

Platform.osx.displayName
Platform.linux.displayName
</code></pre>

<p>In this example, we have a <code>LinuxStrategy</code> type which encapsulates all the linuxy behaviour separately from the <code>OSXStrategy</code>, and the <code>Platform</code> enum uses a custom <code>rawValue</code> type! Unfortunately I can&rsquo;t simulate the <code>unknown</code> case with arguments. I&rsquo;ve tried to do this by calling <code>Platform(rawValue: "osx")?.displayName</code>, but the <code>Platform</code>initializer returns <code>nil</code>.</p>

<h3>Conclusion</h3>

<p>I can&rsquo;t find an easy way to define a Swift <code>enum</code> where each case has distinct behaviour, unless I use <code>switch</code> statements everywhere. Sad times!</p>

<p>Ideally, we&rsquo;d be able to do something like this:</p>

<pre><code>protocol PlatformProtocol {
    func displayName() -&gt; String
}

enum Platform: PlatformProtocol {
    case osx
    case linux
}

extension Platform where Self == Platform.osx {
    func displayName() -&gt; String {
        return "macOS"
    }
}

extension Platform where Self == Platform.linux {
    func displayName() -&gt; String {
        return "linux"
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SwiftMock - A Mocking Solution for Swift 4.2]]></title>
    <link href="http://daringsnowball.net/swiftmock-a-mocking-solution-for-swift-4-dot-2/"/>
    <updated>2018-12-21T11:01:20+00:00</updated>
    <id>http://daringsnowball.net/swiftmock-a-mocking-solution-for-swift-4-dot-2</id>
    <content type="html"><![CDATA[<p>In September 2015, I tried to write a mocking framework for Swift. It was over-engineered, difficult to use and quickly abandoned; I decided instead that simple fakes would suffice.</p>

<p>That all changed earlier this year. I was writing much more Swift, both at home (for the <em>Nearly Departed</em> rewrite) and in my day-job, and realised that mocks really are necessary if we want to thoroughly test how our classes interact with collaborators.</p>

<p>tl;dr: <code>SwiftMock</code> is <a href="https://github.com/mflint/SwiftMock">available on GitHub</a>.</p>

<!-- more -->


<h3>Note about my personal test approach</h3>

<p>I&rsquo;m firmly in the &ldquo;mockist TDD practitioner&rdquo; camp. I exercise my system-under-test in isolation, and provide test doubles for all of its collaborators. My tests exercise the <em>public interface</em> of the system-under-test; they care that the system-under-test did the right thing, not <em>why</em> it did the right thing.</p>

<h3>Various kinds of test doubles</h3>

<p><a href="https://martinfowler.com/">Martin Fowler</a> write a <a href="https://martinfowler.com/articles/mocksArentStubs.html">great article on mocking and stubbing</a> in 2007, and explains things much better than I ever could. But briefly:</p>

<ul>
<li>a <em>test double</em> is a substitute implementation of a component which your system-under-test collaborates with</li>
<li>there are various kinds of test doubles, including:

<ul>
<li>mocks - which have explicit expectations, assert those expectations and will reject unexpected calls</li>
<li>stubs - which are primed to simply return data into your system-under-test; they feed data into your system</li>
<li>fakes - which are simple reimplementations of a collaborator interface (or Swift protocol)</li>
</ul>
</li>
</ul>


<p>Let&rsquo;s briefly discuss these.</p>

<h4>Mock function calls</h4>

<p>I would mock a call if the collaborator is performing a useful action on behalf of the system-under-test. In this case, my test <em>really does care</em> that the expected function is called on the collaborator class, and should fail if that expectation fails.</p>

<p>Examples would be:</p>

<ul>
<li>telling some <code>User</code> object to <code>logout()</code></li>
<li>asking a <code>DataSource</code> object to <code>beginNetworkRequest()</code></li>
<li>asking a <code>Timer</code> object to <code>startTimer(delay: 5)</code></li>
</ul>


<p>Mocked function calls:</p>

<ul>
<li>can have any number of parameters which usually must be checked (so the test should fail if you expect <code>startTimer(delay: 5)</code> but the code actually calls <code>startTimer(delay: 10)</code>)</li>
<li>often have a <code>Void</code> return type</li>
<li>typically have a verb-like name</li>
</ul>


<h4>Stubbed function calls</h4>

<p>A stubbed call is simply used to pass data into your system-under-test. In this case, my test <em>doesn&rsquo;t care</em> if this function is called or not; it only cares that the system-under-test produces the correct output.</p>

<p>Examples:</p>

<ul>
<li>getting a <code>UserModel</code> struct from a <code>User</code> object</li>
<li>getting the <code>isRequesting</code> state from an object which performs network requests</li>
<li>getting the current <code>UserPreferences</code> object from a <code>PreferenceStore</code> collaborator</li>
</ul>


<p>Stubbed functionality:</p>

<ul>
<li>is either a read-only property, or is a function with no parameters</li>
<li>return a non-void result</li>
</ul>


<p>This distinction between mocks and stubs is important; while you <em>can</em> use mocks everywhere, this can lead to fragile tests. You&rsquo;ll eventually find yourself adding expectations that you don&rsquo;t care about, just to make the tests pass.</p>

<h3>Mixing mocked and stubbed calls in a single test double</h3>

<p><a href="https://martinfowler.com/articles/mocksArentStubs.html">Martin&rsquo;s article</a> suggests that a test double would either be a mock, <em>or</em> a stub, <em>or</em> a fake - but I find this choice of mocking or stubbing depends on the <em>function</em> being called, not to the whole object.</p>

<p>Take this protocol as an example of a collaborator:</p>

<pre><code>protocol User {
    var isLoggingIn: Bool { get }
    func login(username: String, password: String)
    func logout()
    func model() -&gt; UserModel
}
</code></pre>

<p><code>isLoggingIn</code> is a read-only property, so is a great candidate for stubbing. Our system-under-test might produce some output like &ldquo;Logging you in&rdquo;, and our test will assert that this output is generated. But it doesn&rsquo;t care <em>how</em> the system-under-test produced the correct output - because that&rsquo;s testing the <em>internal</em> workings of the system-under-test.</p>

<p><code>login(username: password:)</code> and <code>logout()</code> functions would be mocked. Their names are verbs, suggesting that they are performing some important action on behalf of our system-under-test.</p>

<p><code>model()</code> call would be stubbed. It simply returns a value, it&rsquo;s name is a noun, and it could be substituted for a property. My tests doesn&rsquo;t care if this is called or not; but if the system-under-test does call this function, my test would have some other assertions on a different observable outcome.</p>

<h3>How SwiftMock can help your project</h3>

<p><em>SwiftMock</em> can help you assert the correctness of your code, if your tests are more in the <em>mockist</em> style - where you substitute all of your collaborators with test doubles.</p>

<p>It will:</p>

<ul>
<li>allow you to set explicit expectations on a function call</li>
<li>check the supplied parameters to the call are correct</li>
<li>allow you to return values from the call back into the system-under-test</li>
<li>optionally perform actions when a function is called (using a <code>doing</code> block), so function arguments can be captured</li>
<li>fail-fast if unexpected calls are made</li>
</ul>


<h3>More details</h3>

<p>The <a href="https://github.com/mflint/SwiftMock/blob/master/README.md">project README</a> has detailed usage instructions, about how to create and use <em>SwiftMock</em> mocks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accessing Swift Arrays Without Counting on Fingers]]></title>
    <link href="http://daringsnowball.net/accessing-swift-arrays-without-counting-on-fingers/"/>
    <updated>2018-12-02T22:59:43+00:00</updated>
    <id>http://daringsnowball.net/accessing-swift-arrays-without-counting-on-fingers</id>
    <content type="html"><![CDATA[<p>I have a confession to make: I&rsquo;ve been writing code for 35 years, but still need to count on my fingers when coding an array range-check.</p>

<p>It goes something like this:</p>

<ul>
<li>I imagine I have an array containing four elements</li>
<li>I hold up four fingers</li>
<li>I count &ldquo;zero, one, two, three&rdquo;, then think &ldquo;so if I ask for index four, it will break, so I need to range-check&hellip;&rdquo;</li>
</ul>


<p>OMG, 35 years. I&rsquo;ve probably done this thousands of times, and the range-check rules still won&rsquo;t stick in my brain.</p>

<p>But here&rsquo;s a sneaky way to avoid that range-checking code, and I&rsquo;m not ashamed to say that I use this extension for real.</p>

<!-- more -->


<h3>An Array Extension</h3>

<p>This is simply an Array extension which returns <code>nil</code> if the index doesn&rsquo;t exist. My reasoning is this: it&rsquo;s easier (for me) to write <code>if let</code> or <code>guard let</code> rather than counting on my fingers, and it saves me from coding stupid off-by-one errors.</p>

<pre><code>extension Array {
    func element(at index: Int) -&gt; Element? {
        return index &lt; self.count ? self[index] : nil
    }
}
</code></pre>

<p>And I use it like this:</p>

<pre><code>if let fifthElement = myArray.element(at: 4) {
    // do something
}
</code></pre>

<p>Or like this:</p>

<pre><code>guard let fifthElement = myArray.element(at: 4) else {
    // not there
    return
}

// do something
</code></pre>

<p>Result: I do the &ldquo;count on fingers&rdquo; thing once per Swift project, when coding this extension, instead of several times per day.</p>

<p>I wonder if something like this would ever be added to the standard library?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift Extensions for Protocol Conformance Considered Harmful]]></title>
    <link href="http://daringsnowball.net/swift-extensions-for-protocol-conformance-considered-harmful/"/>
    <updated>2018-11-23T12:11:43+00:00</updated>
    <id>http://daringsnowball.net/swift-extensions-for-protocol-conformance-considered-harmful</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve come to the conclusion that using Swift extensions to make types conform to protocols is rather an anti-pattern. Let me explain why.</p>

<!-- more -->


<h3>How extensions can be useful</h3>

<p>Swift type extensions are amazing for adding extra functionality to existing types if the following two conditions are true:</p>

<ol>
<li>you don&rsquo;t own the type</li>
<li>you could reasonably argue that the functionality is <em>missing</em> from that type</li>
</ol>


<p>Example: if we wanted to url-encode a string (<code>Hello world</code> would become <code>Hello%20World</code>), we might do this by extending the <code>String</code> type:</p>

<pre><code>extension String {
    func urlEncode() -&gt; String {
        // implementation here
    }
}
</code></pre>

<p>However, if you already own the type, then I&rsquo;d argue that you should simply add the new functionality to the type itself.</p>

<p>Also, if your new functionality is <em>very specific to the app you&rsquo;re writing</em>, then an extension probably isn&rsquo;t appropriate. Example: your app has a set of railway stations which can be identified by a string &lsquo;reference code&rsquo;. You might consider adding an extension like this, to get the model for a given code:</p>

<pre><code>// don't do this
extension String {
    func stationModel() -&gt; StationModel {
        // implementation here
    }
}

let aslocktonStation = "ALK".stationModel()
</code></pre>

<p>No, don&rsquo;t do that. A Swift <code>String</code> doesn&rsquo;t care about your app.</p>

<h3>Three main problems with extensions for protocol conformance</h3>

<p>However I do object to using extensions for protocol conformance:</p>

<ol>
<li>extensions alter the <em>public interface</em> for the extended type, which breaks encapsulation (exposing the internal workings of that type), and is ripe for abuse by future lazy devs</li>
<li>it&rsquo;s really easy to lose code when relying on extensions everywhere</li>
<li>type-safety can be damaged</li>
</ol>


<h3>Public interface changes</h3>

<p>Here&rsquo;s an example of a class which is interested in receiving messages from a paired WatchKit app:</p>

<pre><code>extension ViewController: WCSessionDelegate {
    func session(_ session: WCSession, didReceiveMessage message: [String : Any]) {
        self.myData = self.parse(incomingMessage: message)
        self.updateUI()
    }
}
</code></pre>

<p>This will work OK, but now <code>WCSessionDelegate</code> is part of the public interface of this <code>ViewController</code> class. Our ViewController&rsquo;s WatchKit dependency is now there for everyone to see (and possibly abuse).</p>

<p>Somebody, eventually, will be tempted call these delegate functions directly:</p>

<pre><code>let session: WCSession? = nil
myViewController.session(session!, didReceiveMessage: ["foo": "bar"])
</code></pre>

<p>A nicer alternative solution, which was common in my Java days, would be to make a private internal type which conforms to the delegate protocol:</p>

<pre><code>class ViewController: UIViewController {
    private class MessageHandler: NSObject, WCSessionDelegate {
        private weak var viewController: ViewController?

        init(viewController: ViewController) {
            self.viewController = viewController
        }

        func session(_ session: WCSession, didReceiveMessage message: [String : Any]) {
            viewController.accept(message)
        }
    }

    private var messageHandler: MessageHandler?

    override func viewDidLoad() {
        messageHandler = MessageHandler(viewController: self)
        watchSession.delegate = messageHandler
    }

    private func accept(_ incomingMessage: [String : Any]) {
        myData = parse(incomingMessage: message)
        updateUI()
    }
}
</code></pre>

<p>With this solution, the WatchKit dependency is hidden and the delegate functions aren&rsquo;t exposed in the public interface for the class.</p>

<h3>Losing code in extensions</h3>

<p>I&rsquo;m a firm believer in having one unambiguous place to put a piece of code, and that code should be easy to find. Unfortunately, when using extensions for protocol conformance, code can get lost.</p>

<p>In my <em>Nearly Departed</em> app rewrite, I have sets of <code>Model</code> objects which contain data received from an API, and some <code>ViewModel</code> protocols which format that data for presentation on-screen.</p>

<p>Simplified example:</p>

<pre><code>struct DepartureModel {
    var destination: String
    var departureTime: String
}

protocol DepartureViewModel {
    func departureDescription() -&gt; String
}

extension DepartureModel: DepartureViewModel {
    func departureDescription() -&gt; String {
        return "\(departureTime) to \(destination)"
    }
}
</code></pre>

<p>So the <code>departureDescription()</code> func might return something like &ldquo;18:05 to Nottingham&rdquo;.</p>

<p>This felt like a fabulous idea, which I embraced - but now I struggle to find those extensions. (Admittedly this is made more difficult because I have targets for an iOS app, a Today extension and a WatchKit extension)</p>

<p>It&rsquo;s so difficult to use that I&rsquo;m starting to rewrite these parts with a separate concrete <code>DepartureViewModel</code> class, which holds a reference to the <code>DepartureModel</code>:</p>

<pre><code>struct DepartureViewModel {
    let departure: DepartureModel

    func departureDescription() -&gt; String {
        return "\(departure.departureTime) to \(departure.destination)"
    }
}
</code></pre>

<p>Yes, preferring composition over interitance is still just as relevant in 2018 - and conformance-via-extensions feels similar to &ldquo;inheritance&rdquo; to me.</p>

<h3>Type-safety implications</h3>

<p>I found that I was writing code like this:</p>

<pre><code>guard let viewModel = model as? DepartureViewModel else {
    // ooh crikey, what now?
    preconditionFailure()
}

label.text = viewModel.departureDescription()
</code></pre>

<p>Not. Pretty. At. All.</p>

<p>I&rsquo;d favour compile-time failures over runtime crashes every time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling widgetPerformUpdate in an iOS Today extension]]></title>
    <link href="http://daringsnowball.net/handling-widgetperformupdate-in-an-ios-today-extension/"/>
    <updated>2018-11-10T12:59:02+00:00</updated>
    <id>http://daringsnowball.net/handling-widgetperformupdate-in-an-ios-today-extension</id>
    <content type="html"><![CDATA[<p>Apple&rsquo;s documentation about the <code>NCWidgetProviding</code> protocol, and <code>widgetPerformUpdate:</code> function in particular are rather sparse, and most posts on StackOverflow seem to have a very simplistic view about how this callback should be coded. So here are my tips.</p>

<!-- more -->


<p>Most examples you&rsquo;ll see for <code>widgetPerformUpdate:</code> look rather like this:</p>

<pre><code>func widgetPerformUpdate(completionHandler: (@escaping (NCUpdateResult) -&gt; Void)) {
    let resultModel = performExpensiveNetworkOperation()
    label.text = resultModel.someValue
    completionHandler(NCUpdateResult.newData)
}
</code></pre>

<p>&hellip; which would probably be OK, most of the time, but there are very few examples of expensive work being done asynchronously.</p>

<p>There are, however, three <em>big</em> hints that this is the right thing to do:</p>

<ol>
<li>Apple&rsquo;s documentation says <em>&ldquo;It&rsquo;s expected that the widget will perform the work to update asynchronously and off the main thread as much as possible&rdquo;</em>. (The <code>widgetPerformUpdate:</code> call does indeed arrive on the main thread)</li>
<li>the <code>completionHandler</code> block is annotated <code>@escaping</code>, implying that it will outlive the scope of the <code>widgetPerformUpdate:</code> function itself</li>
<li>the function returns <code>Void</code>; if this were intended to be a <em>blocking</em> call, then the func would simply have an <code>NCUpdateResult</code> return value instead of providing a completion block</li>
</ol>


<h3>Doing it right</h3>

<p>The correct way to do this depends on whether your long-running operation is synchronous (blocking), or asychronous with a completion block, or asynchronous with a delegate. Here are examples of all three.</p>

<h4>Performing a synchronous (blocking) operation</h4>

<pre><code>class SynchronousCallExampleViewController: UIViewController, NCWidgetProviding {
    private let dataSource = DataSource()
    private var data: Data?

    private func updateUI() {
        DispatchQueue.main.async {
            // update UI components
        }
    }

    func widgetPerformUpdate(completionHandler: @escaping (NCUpdateResult) -&gt; Void) {
        DispatchQueue.global().async {
            // fetch data on a background thread
            self.data = self.dataSource.fetchData()
            self.updateUI()
            completionHandler(.newData)
        }
    }
}
</code></pre>

<h4>Performing an asynchronous operation with a completion block</h4>

<pre><code>class AsynchronousCallWithCompletionBlockExampleViewController: UIViewController, NCWidgetProviding {
    private let dataSource = DataSource()
    private var data: Data?

    private func updateUI() {
        DispatchQueue.main.async {
            // update UI components
        }
    }

    func widgetPerformUpdate(completionHandler: @escaping (NCUpdateResult) -&gt; Void) {
        DispatchQueue.global().async {
            // fetch data on a background thread
            self.dataSource.fetchDataAsync({ [weak self] (data) in
                guard let self = self else { return }

                self.data = data
                self.updateUI()
                completionHandler(.newData)
            })
        }
    }
}
</code></pre>

<h4>Performing an asynchronous operation with a delegate callback</h4>

<pre><code>class AsynchronousCallWithDelegateExampleViewController: UIViewController, NCWidgetProviding, DataSourceDelegate {
    private var dataSource = DataSource()
    private var widgetCompletionHandler: ((NCUpdateResult) -&gt; Void)?
    private var data: Data?

    private func updateUI() {
        DispatchQueue.main.async {
            // update UI components
        }
    }

    func widgetPerformUpdate(completionHandler: @escaping (NCUpdateResult) -&gt; Void) {
        widgetCompletionHandler = completionHandler

        dataSource.delegate = self
        DispatchQueue.global().async {
            // fetch data on a background thread
            self.dataSource.fetchDataAsync()
        }
    }

    func dataDidUpdate(dataSource: DataSource) {
        data = dataSource.data
        updateUI()

        if let completionHandler = widgetCompletionHandler {
            completionHandler(.newData)
            widgetCompletionHandler = nil
        }
    }
}
</code></pre>
]]></content>
  </entry>
  
</feed>
